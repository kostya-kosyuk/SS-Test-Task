{"version":3,"file":"static/js/955.fd3e5c7b.chunk.js","mappings":"kQAKe,SAASA,EAAW,GAAgE,IAA9DC,EAAW,EAAXA,YAAaC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAcC,EAAqB,EAArBA,sBACrE,OACI,SAAC,KAAS,CAACH,YAAaA,EAAY,SAC/B,SAACI,GAAQ,OACN,UAAC,MAAU,gBAACC,OAAO,GAAUD,EAASE,gBAAc,IAAEC,IAAKH,EAASI,SAAS,UACxEP,EAAQQ,KAAI,SAACC,EAAMC,GAAK,OACrB,SAAC,KAAS,CAAYC,YAAaF,EAAMC,MAAOA,EAAM,SACjD,SAACP,GAAQ,OACN,yCAAKG,IAAKH,EAASI,UAAcJ,EAASS,gBAAoBT,EAASU,iBAAe,cACjE,cAAhBd,GACG,SAAC,KAAc,CAACe,QAAS,kBAAMb,EAAaQ,EAAK,EAAC,UAC9C,SAACM,EAAA,EAAY,CAACC,QAASP,EAAMQ,MAAM,YAGvC,UAAC,KAAc,YACX,SAACF,EAAA,EAAY,CAACC,QAASP,EAAMQ,MAAM,UACnC,SAAC,KAAgB,CACb,aAAW,QACXH,QAAS,kBAAMZ,EAAsBO,EAAK,EAAC,UAE3C,SAAC,KAAe,SAI3BN,EAASe,eACR,GAnBET,EAqBJ,IAEfN,EAASe,eACD,GAI7B,CC/Be,SAASC,EAAQ,GAAgE,IAJjEC,EAIGrB,EAAW,EAAXA,YAAaC,EAAO,EAAPA,QAASC,EAAY,EAAZA,aAAcC,EAAqB,EAArBA,sBAClE,OACI,UAAC,KAAa,YACV,UAACmB,EAAA,EAAU,CAACJ,MAAM,SAAQ,WAPPG,EAQQrB,EAP5BqB,EAAOE,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,IAOL,eAExC,SAAC1B,EAAU,CACPC,YAAaA,EACbC,QAASA,EACTC,aAAcA,EACdC,sBAAuBA,MAIvC,C,sBCXe,SAASuB,EAAgB,GAAqC,IAAnCC,EAAW,EAAXA,YAAaC,EAAiB,EAAjBA,kBAC7CC,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9BC,GAAmBF,EAAAA,EAAAA,IAAYG,EAAAA,IAErC,GAA0CC,EAAAA,EAAAA,WAAS,OAAIF,IAAkB,eAAlEG,EAAa,KAAEC,EAAgB,KACtC,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KAChBC,GAAiBC,EAAAA,EAAAA,UAAQ,WAC3B,OAAOL,EAAcM,QAAO,SAACjC,GAAI,OAAKA,EAAKkC,cAAcC,SAASN,EAAM,GAC5E,GAAG,CAACA,EAAOF,IAEX,GAAwCD,EAAAA,EAAAA,WAAS,OAAIL,IAAiB,eAA/De,EAAY,KAAEC,EAAe,KAuCpC,OAAQb,IACJ,SAAC,KAAW,CACRc,KAAMrB,EACNsB,QAASrB,EAAkB,UAE3B,UAAC,KAAkB,YACf,SAAC,KAAiB,CAACsB,KAAK,QAAQC,MAAM,8BAA8BC,KAAK,OACrEC,aAAa,MACbC,SAAU,SAACC,GAAK,OAnCN,SAAChB,GACvBC,EAASD,EAAMK,cACnB,CAiCqCY,CAAkBD,EAAME,OAAOC,MAAM,KAE9D,SAAC,KAAe,CAACC,UA5BX,SAACC,GACf,IAAQC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,YAEhB,GAAKA,GAIDD,EAAO7D,cAAgB8D,EAAY9D,YAAa,CAChD,IAAM+D,GAAW,OAA+B,cAAvBF,EAAO7D,YAA8BqC,EAAgBS,GAC9E,EAAsBiB,EAAYC,OAAOH,EAAOlD,MAAO,GAAhDsD,GAAkD,YAAvC,GACZC,GAAgB,OAAoC,cAA5BJ,EAAY9D,YAA8BqC,EAAgBS,GACxFoB,EAAiBF,OAAOF,EAAYnD,MAAO,EAAGsD,GAE9C3B,EAA6C,cAA5BwB,EAAY9D,YAA8BkE,EAAmBH,GAC9EhB,EAA4C,aAA5Be,EAAY9D,YAA6BkE,EAAmBH,EAChF,CACJ,EAYkD,UAClC,UAAC,KAAkB,YACf,SAAC3C,EAAO,CACJpB,YAAa,YACbC,QAASwC,EACTvC,aA/CH,SAACQ,GAClB4B,GAAiB,SAAA6B,GAAI,cAAQA,EAAKxB,QAAO,SAACyB,GAAK,OAAKA,IAAU1D,CAAI,IAAC,IACnEqC,GAAgB,SAAAoB,GAAI,wBAAQA,GAAI,CAAEzD,GAAO,GAC7C,KA+CoB,SAACU,EAAO,CACJpB,YAAa,WACbC,QAAS6C,EACT3C,sBA1DM,SAACO,GAC3BqC,GAAgB,SAAAoB,GAAI,cAAQA,EAAKxB,QAAO,SAACyB,GAAK,OAAKA,IAAU1D,CAAI,IAAC,IAClE4B,GAAiB,SAAA6B,GAAI,wBAAQA,GAAI,CAAEzD,GAAO,GAC9C,UA2DY,SAAC2D,EAAA,EAAM,CAACC,QAAQ,YACZvD,QAAS,WACLa,IAlDS,SAACS,EAAeS,GACzCjB,GAAS0C,EAAAA,EAAAA,IAAoBlC,IAC7BR,GAAS2C,EAAAA,EAAAA,IAAmB1B,GAChC,CAgDoB2B,CAAqBpC,EAAeS,EACxC,EAAE,SAAC,cAMvB,C","sources":["Components/ColumnList.js","Components/ListBox.js","Components/SelectionWindow.js"],"sourcesContent":["import React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { StyledList, StyledIconButton, StyledCloseIcon, StyledListItem } from '../StyledComponents';\nimport { ListItemText } from '@mui/material';\n\nexport default function ColumnList({ droppableId, columns, handleSelect, handleCancelSelection }) {\n    return (\n        <Droppable droppableId={droppableId}>\n            {(provided) => (\n                <StyledList dense={true} {...provided.droppableProps} ref={provided.innerRef}>\n                    {columns.map((name, index) => (\n                        <Draggable key={name} draggableId={name} index={index}>\n                            {(provided) => (\n                                <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                    {droppableId === 'available' ? (\n                                        <StyledListItem onClick={() => handleSelect(name)}>\n                                            <ListItemText primary={name} align=\"left\" />\n                                        </StyledListItem>\n                                    ) : (\n                                        <StyledListItem>\n                                            <ListItemText primary={name} align=\"left\" />\n                                            <StyledIconButton\n                                                aria-label=\"clear\"\n                                                onClick={() => handleCancelSelection(name)}\n                                            >\n                                                <StyledCloseIcon />\n                                            </StyledIconButton>\n                                        </StyledListItem>\n                                    )}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n                        </Draggable>\n                    ))}\n                    {provided.placeholder}\n                </StyledList>\n            )}\n        </Droppable >\n    )\n}","import { Typography } from '@mui/material';\nimport ColumnList from './ColumnList';\nimport { StyledListBox } from '../StyledComponents';\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default function ListBox({ droppableId, columns, handleSelect, handleCancelSelection }) {\n    return (\n        <StyledListBox>\n            <Typography align='center'>\n                {capitalizeFirstLetter(droppableId)} Columns\n            </Typography>\n            <ColumnList\n                droppableId={droppableId}\n                columns={columns}\n                handleSelect={handleSelect}\n                handleCancelSelection={handleCancelSelection}\n            />\n        </StyledListBox>\n    );\n}","import { StyledSelectionBox, StyledListsWrapper, StyledSearchField, StyledModal } from '../StyledComponents';\nimport { Button } from '@mui/material'\n\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport ListBox from './ListBox';\n\nimport { useState, useMemo } from 'react';\nimport { getSelectedColumns, getAvailableColumns, setAvailableColumns, setSelectedColumns } from '../redux';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function SelectionWindow({ isModalOpen, handleToggleModal }) {\n    const dispatch = useDispatch();\n    const selectedColumns = useSelector(getSelectedColumns);\n    const availableColumns = useSelector(getAvailableColumns);\n\n    const [tempAvailable, setTempAvailable] = useState([...availableColumns]);\n    const [query, setQuery] = useState('');\n    const visibleColumns = useMemo(() => {\n        return tempAvailable.filter((name) => name.toLowerCase().includes(query));\n    }, [query, tempAvailable]);\n\n    const [tempSelected, setTempSelected] = useState([...selectedColumns]);\n\n    const handleCancelSelection = (name) => {\n        setTempSelected(prev => [...prev.filter((name1) => name1 !== name)]);\n        setTempAvailable(prev => [...prev, name]);\n    };\n\n    const handleSelect = (name) => {\n        setTempAvailable(prev => [...prev.filter((name1) => name1 !== name)]);\n        setTempSelected(prev => [...prev, name]);\n    };\n\n    const handleQueryChange = (query) => {\n        setQuery(query.toLowerCase());\n    };\n\n    const handleApplySelection = (tempAvailable, tempSelected) => {\n        dispatch(setAvailableColumns(tempAvailable));\n        dispatch(setSelectedColumns(tempSelected));\n    };\n\n    const onDragEnd = (result) => {\n        const { source, destination } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId !== destination.droppableId) {\n            const sourceItems = [...(source.droppableId === \"available\" ? tempAvailable : tempSelected)];\n            const [removedItem] = sourceItems.splice(source.index, 1);\n            const destinationItems = [...(destination.droppableId === \"available\" ? tempAvailable : tempSelected)];\n            destinationItems.splice(destination.index, 0, removedItem);\n\n            setTempAvailable(destination.droppableId === \"available\" ? destinationItems : sourceItems);\n            setTempSelected(destination.droppableId === \"selected\" ? destinationItems : sourceItems);\n        }\n    };\n\n    return (availableColumns && (\n        <StyledModal\n            open={isModalOpen}\n            onClose={handleToggleModal}\n        >\n            <StyledSelectionBox>\n                <StyledSearchField size='small' label=\"Search available columns...\" type=\"text\"\n                    autoComplete='off'\n                    onChange={(event) => handleQueryChange(event.target.value)}\n                />\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <StyledListsWrapper>\n                        <ListBox\n                            droppableId={'available'}\n                            columns={visibleColumns}\n                            handleSelect={handleSelect}\n                        />\n\n                        <ListBox\n                            droppableId={'selected'}\n                            columns={tempSelected}\n                            handleCancelSelection={handleCancelSelection}\n                        />\n                    </StyledListsWrapper>\n                </DragDropContext>\n                <Button variant=\"contained\"\n                    onClick={() => {\n                        handleToggleModal();\n                        handleApplySelection(tempAvailable, tempSelected);\n                    }}>\n                    Apply\n                </Button>\n            </StyledSelectionBox>\n        </StyledModal>\n    ))\n}"],"names":["ColumnList","droppableId","columns","handleSelect","handleCancelSelection","provided","dense","droppableProps","ref","innerRef","map","name","index","draggableId","draggableProps","dragHandleProps","onClick","ListItemText","primary","align","placeholder","ListBox","string","Typography","charAt","toUpperCase","slice","SelectionWindow","isModalOpen","handleToggleModal","dispatch","useDispatch","selectedColumns","useSelector","getSelectedColumns","availableColumns","getAvailableColumns","useState","tempAvailable","setTempAvailable","query","setQuery","visibleColumns","useMemo","filter","toLowerCase","includes","tempSelected","setTempSelected","open","onClose","size","label","type","autoComplete","onChange","event","handleQueryChange","target","value","onDragEnd","result","source","destination","sourceItems","splice","removedItem","destinationItems","prev","name1","Button","variant","setAvailableColumns","setSelectedColumns","handleApplySelection"],"sourceRoot":""}